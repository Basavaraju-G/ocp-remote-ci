#---------------------------------------------------------------------
# Configuration for s390x zKVM CI environment.
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log 127.0.0.1:514  local2 info
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option http-server-close

    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# API frontend which proxys to the created master nodes
#---------------------------------------------------------------------
frontend api
    bind        *:6443
    mode        tcp
    option      tcplog

    tcp-request inspect-delay 5
    tcp-request content accept if { req_ssl_hello_type 1 }

    acl env0 req.ssl_sni -m end libvirt-s390x-00
    acl env1 req.ssl_sni -m end libvirt-s390x-01
    acl env2 req.ssl_sni -m end libvirt-s390x-02
    acl env3 req.ssl_sni -m end libvirt-s390x-03
    acl env4 req.ssl_sni -m end libvirt-s390x-04

    use_backend masters-00 if env0
    use_backend masters-01 if env1
    use_backend masters-02 if env2
    use_backend masters-03 if env3
    use_backend masters-04 if env4

    default_backend     masters-00

#---------------------------------------------------------------------
# HTTP frontend which proxys to the created worker nodes
#---------------------------------------------------------------------
frontend http
    bind *:80

    acl env0 hdr_end(host) -i libvirt-s390x-00
    acl env1 hdr_end(host) -i libvirt-s390x-01
    acl env2 hdr_end(host) -i libvirt-s390x-02
    acl env3 hdr_end(host) -i libvirt-s390x-03
    acl env4 hdr_end(host) -i libvirt-s390x-04

    use_backend http-workers-00 if env0
    use_backend http-workers-01 if env1
    use_backend http-workers-02 if env2
    use_backend http-workers-03 if env3
    use_backend http-workers-04 if env4

    default_backend http-workers-00

#---------------------------------------------------------------------
# HTTPS frontend which proxys to the created worker nodes
#---------------------------------------------------------------------
frontend https
    bind        *:443
    mode        tcp
    option      tcplog

    tcp-request inspect-delay 5
    tcp-request content accept if { req_ssl_hello_type 1 }

    acl env0 req.ssl_sni -m end libvirt-s390x-00
    acl env1 req.ssl_sni -m end libvirt-s390x-01
    acl env2 req.ssl_sni -m end libvirt-s390x-02
    acl env3 req.ssl_sni -m end libvirt-s390x-03
    acl env4 req.ssl_sni -m end libvirt-s390x-04

    use_backend https-workers-00 if env0
    use_backend https-workers-01 if env1
    use_backend https-workers-02 if env2
    use_backend https-workers-03 if env3
    use_backend https-workers-04 if env4

    default_backend     https-workers-00

#---------------------------------------------------------------------
# Master node backends for serving API traffic
#---------------------------------------------------------------------
backend masters-00
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      master1 192.168.126.11:6443 check
    server      master2 192.168.126.12:6443 check
    server      master3 192.168.126.13:6443 check
backend masters-01
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      master1 192.168.1.11:6443 check
    server      master2 192.168.1.12:6443 check
    server      master3 192.168.1.13:6443 check
backend masters-02
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      master1 192.168.2.11:6443 check
    server      master2 192.168.2.12:6443 check
    server      master3 192.168.2.13:6443 check
backend masters-03
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      master1 192.168.3.11:6443 check
    server      master2 192.168.3.12:6443 check
    server      master3 192.168.3.13:6443 check
backend masters-04
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      master1 192.168.4.11:6443 check
    server      master2 192.168.4.12:6443 check
    server      master3 192.168.4.13:6443 check

#---------------------------------------------------------------------
# Worker node backends for serving HTTP service endpoints
#---------------------------------------------------------------------
backend http-workers-00
    balance     roundrobin
    server      worker1 192.168.126.51:80 check
    server      worker2 192.168.126.52:80 check
backend http-workers-01
    balance     roundrobin
    server      worker1 192.168.1.51:80 check
    server      worker2 192.168.1.52:80 check
backend http-workers-02
    balance     roundrobin
    server      worker1 192.168.2.51:80 check
    server      worker2 192.168.2.52:80 check
backend http-workers-03
    balance     roundrobin
    server      worker1 192.168.3.51:80 check
    server      worker2 192.168.3.52:80 check
backend http-workers-04
    balance     roundrobin
    server      worker1 192.168.4.51:80 check
    server      worker2 192.168.4.52:80 check
#---------------------------------------------------------------------
# Debug node
#---------------------------------------------------------------------
#backend node
#    server      node 127.0.0.1:8081 check

#---------------------------------------------------------------------
# Worker node backends for serving HTTPS service endpoints
#---------------------------------------------------------------------
backend https-workers-00
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      worker1 192.168.126.51:443 check
    server      worker2 192.168.126.52:443 check
backend https-workers-01
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      worker1 192.168.1.51:443 check
    server      worker2 192.168.1.52:443 check
backend https-workers-02
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      worker1 192.168.2.51:443 check
    server      worker2 192.168.2.52:443 check
backend https-workers-03
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      worker1 192.168.3.51:443 check
    server      worker2 192.168.3.52:443 check
backend https-workers-04
    mode        tcp
    option      tcplog
    balance     roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option      ssl-hello-chk
    server      worker1 192.168.4.51:443 check
    server      worker2 192.168.4.52:443 check
#---------------------------------------------------------------------
# Debug node https
#---------------------------------------------------------------------
#backend node-https
#    mode        tcp
#    option      tcplog
#
#    # maximum SSL session ID length is 32 bytes.
#    stick-table type binary len 32 size 30k expire 30m
#    acl clienthello req_ssl_hello_type 1
#    acl serverhello rep_ssl_hello_type 2
#
#    # use tcp content accepts to detects ssl client and server hello.
#    tcp-request inspect-delay 5s
#    tcp-request content accept if clienthello
#
#    # no timeout on response inspect delay by default.
#    tcp-response content accept if serverhello
#    stick on payload_lv(43,1) if clienthello
#
#    # Learn on response if server hello.
#    stick store-response payload_lv(43,1) if serverhello
#
#    option      ssl-hello-chk
#    server      node 127.0.0.1:8443 check
